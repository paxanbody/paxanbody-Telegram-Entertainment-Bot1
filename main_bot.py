from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)
from dotenv import load_dotenv
import os
from datetime import datetime

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

translations = {
    "start_message": {
        "en": "Hi there! I'm Fun Entertainment Bot.\nType /games to play or /help to see available commands.",
        "ua": "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–æ–∑–≤–∞–≥.\n–ù–∞–ø–∏—à—ñ—Ç—å /games —â–æ–± –≥—Ä–∞—Ç–∏ –∞–±–æ /help —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏."
    },
    "choose_game": {
        "en": "Choose the game! Let's make some fun!",
        "ua": "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É!"
    },
    "help_message": {
        "en": (
            "üìã Available commands:\n"
            "/start ‚Äî Welcome message\n"
            "/games ‚Äî Show list of games\n"
            "/language ‚Äî Choose your language\n"
            "/profile ‚Äî Show your profile\n"
            "/favorite ‚Äî Choose your favorite game\n"
            "/help ‚Äî Show this help message"
        ),
        "ua": (
            "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start ‚Äî –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            "/games ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —ñ–≥–æ—Ä\n"
            "/language ‚Äî –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É\n"
            "/profile ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\n"
            "/favorite ‚Äî –í–∏–±—Ä–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—É –≥—Ä—É\n"
            "/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
        )
    },
    "profile_title": {
        "en": "üë§ <b>Your profile</b>",
        "ua": "üë§ <b>–¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å</b>"
    },
    "language_name": {
        "en": "English",
        "ua": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"
    },
    "achievements": {
        "en": "üèÜ Achievements:",
        "ua": "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:"
    },
    "no_achievements": {
        "en": "None yet. Play more games to earn achievements!",
        "ua": "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î. –ì—Ä–∞–π –±—ñ–ª—å—à–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!"
    },
    "history_title": {
        "en": "üïì Recent games:",
        "ua": "üïì –û—Å—Ç–∞–Ω–Ω—ñ —ñ–≥—Ä–∏:"
    },
    "choose_favorite": {
        "en": "Choose your favorite game:",
        "ua": "–û–±–µ—Ä—ñ—Ç—å —É–ª—é–±–ª–µ–Ω—É –≥—Ä—É:"
    },
    "favorite_set": {
        "en": "‚ù§Ô∏è Your favorite game is now: {game}",
        "ua": "‚ù§Ô∏è –¢–≤–æ—è —É–ª—é–±–ª–µ–Ω–∞ –≥—Ä–∞ —Ç–µ–ø–µ—Ä: {game}"
    },
    "starting_game": {
        "en": "üéÆ Starting {game}! Good luck!\n{url}",
        "ua": "üéÆ –ü–æ—á–∏–Ω–∞—î–º–æ {game}! –£–¥–∞—á—ñ!\n{url}"
    },
    "no_games_played": {
        "en": "No games played yet.",
        "ua": "–©–µ –Ω–µ –∑—ñ–≥—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –≥—Ä–∏."
    }
}

def translate(key: str, context: ContextTypes.DEFAULT_TYPE) -> str:
    lang = context.user_data.get("language", "en")
    return translations.get(key, {}).get(lang, f"[{key}]")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(translate("start_message", context))

async def games_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üêç Snake", url="https://telegram-snake.vercel.app/")],
        [InlineKeyboardButton("üí£ Saper", url="https://telegram-saper.vercel.app/")],
        [InlineKeyboardButton("üß± Tetris", url="https://telegram-tetris-indol.vercel.app/")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(translate("choose_game", context), reply_markup=reply_markup)

async def play_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    game_name = query.data
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M")

    context.user_data["games_played"] = context.user_data.get("games_played", 0) + 1

    history = context.user_data.get("game_history", [])
    history.append({"name": game_name, "time": now_str})
    if len(history) > 10:
        history.pop(0)
    context.user_data["game_history"] = history
    await check_achievements(context)

    game_urls = {
        "Snake": "https://telegram-snake.vercel.app/",
        "Saper": "https://telegram-saper.vercel.app/",
        "Tetris": "https://telegram-tetris-indol.vercel.app/",
    }
    url = game_urls.get(game_name, "#")

    text = translate("starting_game", context).format(game=game_name, url=url)
    await query.edit_message_text(text)

async def check_achievements(context: ContextTypes.DEFAULT_TYPE):
    played = context.user_data.get("games_played", 0)
    history = context.user_data.get("game_history", [])

    achievements = context.user_data.get("achievements", [])

    if played >= 10 and "üéâ Game Explorer" not in achievements:
        achievements.append("üéâ Game Explorer")

    played_games = {entry["name"] for entry in history}
    required_games = {"Snake", "Saper", "Tetris"}
    if required_games.issubset(played_games) and "üîÑ Variety Player" not in achievements:
        achievements.append("üîÑ Variety Player")

    context.user_data["achievements"] = achievements

async def favorite_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üêç Snake", callback_data="fav_Snake")],
        [InlineKeyboardButton("üí£ Saper", callback_data="fav_Saper")],
        [InlineKeyboardButton("üß± Tetris", callback_data="fav_Tetris")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(translate("choose_favorite", context), reply_markup=reply_markup)

async def favorite_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    fav_game = query.data.replace("fav_", "")
    context.user_data["favorite_game"] = fav_game

    text = translate("favorite_set", context).format(game=fav_game)
    await query.edit_message_text(text)

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    lang = context.user_data.get("language", "en")
    games_played = context.user_data.get("games_played", 0)
    fav_game = context.user_data.get("favorite_game", "None")
    achievements = context.user_data.get("achievements", [])
    history = context.user_data.get("game_history", [])

    lang_display = translate("language_name", context)

    achievements_text = "\n".join(achievements) if achievements else translate("no_achievements", context)

    recent_games = history[-3:]
    recent_text = (
        "\n".join([f"{g['name']} ‚Äî {g['time']}" for g in recent_games])
        if recent_games else translate("no_games_played", context)
    )

    text = (
        f"{translate('profile_title', context)}\n"
        f"ü™™ Name: {user.first_name}\n"
        f"üåê Language: {lang_display}\n"
        f"üéÆ Games played: {games_played}\n"
        f"‚ù§Ô∏è Favorite: {fav_game}\n\n"
        f"{translate('achievements', context)}\n{achievements_text}\n\n"
        f"{translate('history_title', context)}\n{recent_text}"
    )

    await update.message.reply_text(text, parse_mode="HTML")

async def set_commands(application):
    commands = [
        BotCommand("start", "Start the bot"),
        BotCommand("games", "Show list of games"),
        BotCommand("help", "List all commands"),
        BotCommand("language", "Choose your language"),
        BotCommand("profile", "Show your profile"),
        BotCommand("favorite", "Choose your favorite game"),
    ]
    await application.bot.set_my_commands(commands)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(translate("help_message", context))

async def language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Ukrainian", callback_data="lang_ua")],
        [InlineKeyboardButton("English", callback_data="lang_en")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Choose your language / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=markup)

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lang_code = query.data.replace("lang_", "")
    context.user_data["language"] = lang_code

    if lang_code == "ua":
        await query.edit_message_text("‚úÖ –ú–æ–≤–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    else:
        await query.edit_message_text("‚úÖ Language set to: English")

async def games_callback_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üêç Snake", callback_data="Snake")],
        [InlineKeyboardButton("üí£ Saper", callback_data="Saper")],
        [InlineKeyboardButton("üß± Tetris", callback_data="Tetris")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(translate("choose_game", context), reply_markup=reply_markup)

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(set_commands).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("games", games_callback_menu))  # —Ç–µ–ø–µ—Ä—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—Å–∫–∞
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("language", language_command))
    app.add_handler(CommandHandler("profile", profile_command))
    app.add_handler(CommandHandler("favorite", favorite_menu))

    app.add_handler(CallbackQueryHandler(language_callback, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(favorite_callback, pattern="^fav_"))
    app.add_handler(CallbackQueryHandler(play_game, pattern="^(Snake|Saper|Tetris)$"))

    print("Bot started.")
    app.run_polling()
